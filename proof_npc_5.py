

from manim import *
from colour import Color

class proof_npc_5(Scene):
    def construct(self):
        text_3SAT = MathTex(r"3", r"SAT").scale(1.2).to_edge(UP)
        threeSATeq_expanded = MathTex(r"\varphi = ",r"(x_1 \lor \overline{x_2} \lor x_3)", r"\land", r"(\overline{x_1} \lor x_3 \lor x_4)", r"\land",  r"(x_2 \lor \overline{x_3} \lor x_4)")
        threeSATeq_expanded.to_edge(UP)
        threeSATeq_expanded.shift(DOWN)
        threesat_q = MathTex(r"\text{Is there an assignment of } x_1, x_2, x_3, x_4 \text{ that makes } \varphi \text{ TRUE?}")
        threesat_q.scale(0.8)
        threesat_q.next_to(threeSATeq_expanded, DOWN)
        # add a horizontal line below threesat_q
        line = Line(start=threesat_q.get_corner(DOWN+LEFT), end=threesat_q.get_corner(DOWN+RIGHT))
        self.add(text_3SAT, threeSATeq_expanded, threesat_q, line)
        self.wait(1)

        text_satisfiable = MathTex(r"\varphi", r"\text{ is }", r"\text{satisfiable }", r"\text{if there exists an assignment to variables }").scale(0.8)
        text_satisfiable.next_to(threesat_q, DOWN*2)
        text_satisfiable[1].set_colorYELLOW
        text_sat_2 = MathTex(r"\text{so that the entire formula evalues to TRUE}").scale(0.8)
        text_sat_2.next_to(text_satisfiable, DOWN)
        self.play(Write(text_satisfiable), Write(text_sat_2), run_time=0.8)
        self.wait(1)

        text_var_1 = MathTex(r"x_1 = \text{TRUE}").set_color(GREEN)
        text_var_2 = MathTex(r"x_2 = \text{FALSE}").set_color(RED)
        text_var_3 = MathTex(r"x_3 = \text{TRUE}").set_color(GREEN)
        text_var_4 = MathTex(r"x_4 = \text{TRUE}").set_color(GREEN)
        text_var_1.shift(DOWN*0.5 + LEFT*4.5)
        text_var_2.shift(DOWN*0.5, LEFT*1.5)
        text_var_3.shift(DOWN*0.5, RIGHT*1.5)
        text_var_4.shift(DOWN*0.5, RIGHT*4.5)
        group_vals = VGroup(text_var_1, text_var_2, text_var_3, text_var_4)
        surr_box = SurroundingRectangle(group_vals)
        self.play(Write(text_var_1), Write(text_var_2), Write(text_var_3), Write(text_var_4), Write(surr_box), run_time=0.8)
        self.wait(0.5)
        anchor_pt = threeSATeq_expanded[1].get_center()
        
        self.play(threeSATeq_expanded[1].animate.shift(DOWN*3.8))
        move_to_pt = threeSATeq_expanded[1].get_center()
        clause_1 = MathTex(r"=",  r"\text{TRUE}",  r"\lor",  r"\overline{\text{FALSE}}",  r"\lor",  r"\text{TRUE}").scale(0.8)
        clause_1[1].set_color(GREEN)
        clause_1[5].set_color(GREEN)
        clause_1.next_to(threeSATeq_expanded[1], RIGHT)
        self.play(Write(clause_1), run_time=0.5)
        self.wait(0.6)
        clause_1_v2 = MathTex(r"=", r"\text{TRUE}",  r"\lor",  r"\text{TRUE}",  r"\lor",  r"\text{TRUE}").scale(0.8)
        clause_1_v2[1].set_color(GREEN)
        clause_1_v2[3].set_color(GREEN)
        clause_1_v2[5].set_color(GREEN)
        clause_1_v2.next_to(threeSATeq_expanded[1], RIGHT)
        self.play(Transform(clause_1, clause_1_v2))
        self.wait(0.6)
        clause_1_v3 = MathTex(r"= ", r"\text{TRUE}").scale(0.8)
        clause_1_v3[1].set_color(GREEN)
        clause_1_v3.next_to(threeSATeq_expanded[1], RIGHT)
        self.play(Transform(clause_1, clause_1_v3))
        self.wait(0.6)
        text_true = MathTex(r"\text{TRUE}").scale(1.2).set_color(GREEN)
        text_true.move_to(anchor_pt)
        self.play(FadeOut(threeSATeq_expanded[1]), Transform(clause_1, text_true))
        self.wait(1)

        anchor_pt = threeSATeq_expanded[3].get_center()
        self.play(threeSATeq_expanded[3].animate.move_to(move_to_pt))
        clause_2 = MathTex(r"= \overline{\text{TRUE}} \lor ", r"\text{TRUE}", r" \lor",  r"\text{TRUE}").scale(0.8)
        clause_2[1].set_color(GREEN)
        clause_2[3].set_color(GREEN)
        clause_2.next_to(threeSATeq_expanded[3], RIGHT)
        self.play(Write(clause_2), run_time=0.5)
        self.wait(0.6)
        clause_2_v2 = MathTex(r"=",  r"\text{FALSE}", r" \lor", r"\text{TRUE}",  r"\lor" , r"\text{TRUE}").scale(0.8)
        clause_2_v2[1].set_color(RED)
        clause_2_v2[3].set_color(GREEN)
        clause_2_v2[5].set_color(GREEN)
        clause_2_v2.next_to(threeSATeq_expanded[3], RIGHT)
        self.play(Transform(clause_2, clause_2_v2))
        self.wait(0.6)
        clause_2_v3 = MathTex(r"= ", r"\text{TRUE}").scale(0.8)
        clause_2_v3[1].set_color(GREEN)
        clause_2_v3.next_to(threeSATeq_expanded[3], RIGHT)
        self.play(Transform(clause_2, clause_2_v3))
        self.wait(0.6)
        text_true_2 = MathTex(r"\text{TRUE}").scale(1.2).set_color(GREEN)
        text_true_2.move_to(anchor_pt)
        self.play(FadeOut(threeSATeq_expanded[3]), Transform(clause_2, text_true_2))
        self.wait(1)

        anchor_pt = threeSATeq_expanded[5].get_center()
        self.play(threeSATeq_expanded[5].animate.move_to(move_to_pt))
        clause_3 = MathTex(r"=",  r"\text{FALSE}" , r"\lor",  r"\overline{\text{TRUE}}",  r"\lor",  r"\text{TRUE}").scale(0.8)
        clause_3[1].set_color(RED)
        clause_3[5].set_color(GREEN)
        clause_3.next_to(threeSATeq_expanded[5], RIGHT)
        self.play(Write(clause_3), rum_time=0.5)
        self.wait(0.6)
        clause_3_v2 = MathTex(r"= ", r"\text{FALSE}",  r"\lor",  r"\text{FALSE}",  r"\lor",  r"\text{TRUE}").scale(0.8)
        clause_3_v2[1].set_color(RED)
        clause_3_v2[3].set_color(RED)
        clause_3_v2[5].set_color(GREEN)
        clause_3_v2.next_to(threeSATeq_expanded[5], RIGHT)
        self.play(Transform(clause_3, clause_3_v2))
        self.wait(0.6)
        clause_3_v3 = MathTex(r"= ", r"\text{TRUE}").scale(0.8)
        clause_3_v3[1].set_color(GREEN)
        clause_3_v3.next_to(threeSATeq_expanded[5], RIGHT)
        self.play(Transform(clause_3, clause_3_v3))
        self.wait(0.6)
        text_true_3 = MathTex(r"\text{TRUE}").scale(1.2).set_color(GREEN)
        text_true_3.move_to(anchor_pt)
        self.play(FadeOut(threeSATeq_expanded[5]), Transform(clause_3, text_true_3))          
        self.wait(1)

        leftover_phi = VGroup(clause_1, clause_2, clause_3, threeSATeq_expanded[2], threeSATeq_expanded[4])
        new_phi = MathTex(r"\text{TRUE}").scale(1.2).set_color(GREEN)
        new_phi.next_to(threeSATeq_expanded[0], RIGHT)
        self.play(Transform(leftover_phi, new_phi))
        self.wait(3)         
        self.play(FadeOut(leftover_phi),
                  FadeOut(text_satisfiable), 
                  FadeOut(text_sat_2), FadeOut(surr_box),
                    FadeOut(threesat_q), FadeOut(line),
                    FadeOut(group_vals), FadeOut(text_3SAT),
                    FadeOut(threeSATeq_expanded[0]))
        self.wait(2)   

